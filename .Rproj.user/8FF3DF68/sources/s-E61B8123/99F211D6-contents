library(shiny)
require(rgl)
ui <- fluidPage(
    
    titlePanel("Tumor Generator"),
    
    sidebarLayout(
        sidebarPanel(
            numericInput("n", "Population Size", 100000),
            sliderInput("wt_br", "Wild type birth rate",  min = 0.0, max = 1.0, step = 0.01, value = 0.69),
            sliderInput("wt_dr", "Wild type death rate", min = 0.0, max = 1.0, step = 0.01, value = 0.35),
            sliderInput("u", "Mutation probability", min = 0.0, max = 0.05, step = 0.001, value = 0.01),
            sliderInput("du", "Probability of driver mutation", min = 0.0, max = 0.001, step = 0.000005, value = 0.00005),
            sliderInput( "drmu", "Driver Multiplicative Update", min = 1.0, max = 2.0, step = 0.01, value = 1.30),
            actionButton("do", "Generate Tumor")
            ),
    
        mainPanel(
            rglwidgetOutput(outputId = "plotTumor", width = "75%", height = "700px")
        )
    ),
    
    titlePanel("2D Cross Section"),
    sidebarLayout(
        sidebarPanel(
            selectInput(
                "slice_dim",
                label = h3("Select slice dimension"),
                choices = c("x", "y", "z")
            ),
            sliderInput("slice_level", "Slice Level", min = 0, max = 500, step = 1, value = 250),
            actionButton("do1", "Generate Cross Section")
        ),
        mainPanel(
            plotOutput(outputId = "plotSlice", width = "75%", height = "700px")
        )
    ),
    
    titlePanel("Number of Mutants vs. Euclidean distance"),
    sidebarLayout(
        sidebarPanel(
            actionButton("do2", "Generate Plot")
        ),
        mainPanel(
            plotOutput(outputId = "plotEuclidMutant", width = "75%", height = "700px")
        )
    ),
    titlePanel("Jaccard similarity vs. Euclidean distance"),
    sidebarLayout(
        sidebarPanel(
            numericInput("N_jac", "Samples", 10000),
            actionButton("do3", "Generate Plot")
        ),
        mainPanel(
            plotOutput(outputId = "plotJaccardDistance", width = "75%", height = "700px")
        )
    ),
    
    titlePanel("Jaccard similarity vs. Spherical shell distance"),
    sidebarLayout(
        sidebarPanel(
            numericInput("N_jac_sphere", "Samples", 5000),
            numericInput("bin_min", "Bin 1 minimum (GREEN)", 8),
            numericInput("bin_max", "Bin 1 maximum", 10),
            numericInput("bin_min2", "Bin 2 minimum (BLUE)", 20),
            numericInput("bin_max2", "Bin 2 maximum", 22),
            numericInput("bin_min3", "Bin 3 minimum (RED)", 33),
            numericInput("bin_max3", "Bin 3 maximum", 35),
            actionButton("do4", "Generate Plot")
        ),
        mainPanel(
            plotOutput(outputId = "plotJaccardSpherical", width = "75%", height = "700px")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {
    get_tumor_data <- eventReactive(input$do, {
        get_color_scheme <- function(cell_ids)
        {
            max_specie <- max(cell_ids[,4])
            specie_assignment <- rep(0, max_specie)
            specie_assignment[1] = rgb(0.5, 0.5, 0.5, 1)
            if(length(specie_assignment) == 1)
            {
                return(specie_assignment)
            }
            for(i in 2:max_specie)
            {
                x <- runif(1,0.18, 0.91)
                y <- runif(1,0.18, 0.91)
                z <- runif(1,0.13, 0.91)
                specie_assignment[i] = rgb(x,y,z,1)
            }
            
            return(specie_assignment)
        }
        
        plot_slice <- function(cell_ids, dimension, level, color_scheme)
        {
            df_slice <- cell_ids[cell_ids[,dimension] == level,-dimension]
            plot(df_slice[,1], df_slice[,2], col = color_scheme[df_slice[,3] + 1], pch = 16)
        }
        
        system("g++ Simulation/simulation.cpp -std=c++17")
        Sys.chmod("a.out")
        system(paste("./a.out", input$n, input$wt_br, input$wt_dr, input$u, input$du, input$drmu), wait = TRUE)
        
        cell_ids <- read.csv("Simulation/output_files/cell_coords_species_id.txt", header = FALSE)
        color_scheme <<- get_color_scheme(cell_ids)
        
        return_list <- list()
        return_list[[1]] <- cell_ids
        return_list[[2]] <- color_scheme
        return(return_list)
    })
    
    get_cross_section <- eventReactive(input$do1,{
        slice <- 1
        if(input$slice_dim == "y")
        {
            slice <- 2
        }
        else if(input$slice_dim == "z")
        {
            slice <- 3
        }
        cell_ids <- read.csv("Simulation/output_files/cell_coords_species_id.txt", header = FALSE)
        df_slice <- cell_ids[cell_ids[,slice] == input$slice_level, -slice]
        return(df_slice)
    })
    
    get_mutant_distance <- eventReactive(input$do2,{
        distances <- read.csv("Simulation/output_files/mutant_distances.txt", header = FALSE)
        
        mean_mutant <- matrix(1, nrow = max(distances[,1]) + 1, ncol = 2)
        for(i in unique(distances[,1]))
        {
            mean_mutant[i + 1, 1] <- i
            mean_mutant[i + 1, 2] <- mean(distances[distances[,1] == i, 2])
        }
        return(mean_mutant)
    })
    
    get_jaccard_distance <- eventReactive(input$do3,{
        
        jaccard <- function(cell_coords, species_list, N)
        {
            sampled_similarities <- matrix(0, nrow = N, ncol = 2)
            for(i in 1:N)
            {
                x <-sample(1:nrow(cell_coords), 2, replace = FALSE)
                dist <- (cell_coords[x[1],2] - cell_coords[x[2],2])^2+(cell_coords[x[1],2] - cell_coords[x[2],2])^2+(cell_coords[x[1],3] - cell_coords[x[2],3])^2
                dist <- sqrt(dist)
                
                species_i <- species_list[[ cell_coords[x[1], 4] + 1]]
                species_j <- species_list[[ cell_coords[x[2], 4] + 1]]
                
                jaccard_d <- length(intersect(species_i,species_j))/length(union(species_i,species_j))
                
                sampled_similarities[i,1] <- dist
                sampled_similarities[i,2] <- jaccard_d
            }
            return(sampled_similarities)
        }
        
        N <- input$N_jac
        ncol <- max(count.fields("Simulation/output_files/species_dict.txt", sep = ","))
        species_dict <- read.table("Simulation/output_files/species_dict.txt", header=F, sep=",", fill=T, col.names=paste0('V', seq_len(ncol)))
        cell_coords <- read.csv("Simulation/output_files/cell_coords_species_id.txt", header = F)
        
        species_list <- list()
        for(i in 1:nrow(species_dict))
        {
            row <- species_dict[i,]
            x <- c()
            for(j in 1:length(row))
            {
                if(!is.na(species_dict[i,j]))
                {
                    x <- c(x, species_dict[i,j])
                }
            }
            species_list[[i]] = x
        }
        
        jaccard_df <- jaccard(cell_coords, species_list, N)
        jaccard_df[,1] <- apply(jaccard_df, 1, function(x) round(x[1]))
        
        mean_jaccard <- matrix(1, nrow = max(jaccard_df[,1]) + 1, ncol = 2)
        for(i in unique(jaccard_df[,1]))
        {
            mean_jaccard[i + 1, 1] <- i
            mean_jaccard[i + 1, 2] <- mean(jaccard_df[jaccard_df[,1] == i, 2])
        }
        return(mean_jaccard)
    })
    
    get_jaccard_spherical <- eventReactive(input$do4, {

        spherical_jaccard <- function(cell_coords, species_list, N, bin_min, bin_max, distances)
        {
            df <- cbind(cell_coords, distances[,1])
            df <- df[df[,5] >= bin_min & df[,5] <= bin_max,]
            df[,c(1,2,3)] <- df[,c(1,2,3)] - 250
            
            results <- matrix(0, nrow = N, ncol = 2)
            for(i in 1:N)
            {
                x <- sample(1:nrow(df), 2, replace = FALSE)
                
                p1 <- df[x[1], c(1,2,3)]/(sqrt(sum(df[x[1], c(1,2,3)]^2)))
                p2 <- df[x[2], c(1,2,3)]/(sqrt(sum(df[x[2], c(1,2,3)]^2)))
                
                delta = sqrt(sum((p1-p2)^2))
                
                phi = asin(delta/2)
                gc_dist = 2*phi
                
                species_i <- species_list[[ df[x[1], 4] + 1]]
                species_j <- species_list[[ df[x[2], 4] + 1]]
                
                jaccard_d <- length(intersect(species_i,species_j))/length(union(species_i,species_j))
                
                results[i,1] <- gc_dist
                results[i,2] <- jaccard_d
            }
            rm(df)
            return(results)
        }
        
        ncol <- max(count.fields("Simulation/output_files/species_dict.txt", sep = ","))
        species_dict <- read.table("Simulation/output_files/species_dict.txt", header=F, sep=",", fill=T, col.names=paste0('V', seq_len(ncol)))
        cell_coords <- read.csv("Simulation/output_files/cell_coords_species_id.txt", header = F)

        species_list <- list()
        for(i in 1:nrow(species_dict))
        {
            row <- species_dict[i,]
            x <- c()
            for(j in 1:length(row))
            {
                if(!is.na(species_dict[i,j]))
                {
                    x <- c(x, species_dict[i,j])
                }
            }
            species_list[[i]] = x
        }
        
        return_list <- c()
        
        #SPHERICAL DISTANCE#
        N <- input$N_jac_sphere
        bin_min <- input$bin_min
        bin_max <- input$bin_max
        distances <- read.csv("Simulation/output_files/mutant_distances.txt", header = FALSE)
        angle_jaccard1 <- spherical_jaccard(cell_coords, species_list, N, bin_min, bin_max, distances)
        angle_jaccard1[,1] <- apply(angle_jaccard1, 1, function(x) round(x[1], digits = 1))
        unique_differences <- unique(angle_jaccard1[,1])
        mean_jaccard <- matrix(0, nrow = 0, ncol = 2)
        for(i in unique_differences)
        {
            mean_jaccard <- rbind(mean_jaccard, c(i, mean(angle_jaccard1[angle_jaccard1[,1] == i,2])))
        }
        return_list[[1]] <- mean_jaccard
        #SPHERICAL DISTANCE#
        angle_jaccard2 <- spherical_jaccard(cell_coords, species_list, N, input$bin_min2, input$bin_max2, distances)
        angle_jaccard2[,1] <- apply(angle_jaccard2, 1, function(x) round(x[1], digits = 1))
        unique_differences <- unique(angle_jaccard2[,1])
        mean_jaccard2 <- matrix(0, nrow = 0, ncol = 2)
        for(i in unique_differences)
        {
            mean_jaccard2 <- rbind(mean_jaccard2, c(i, mean(angle_jaccard2[angle_jaccard2[,1] == i,2])))
        }
        return_list[[2]] <- mean_jaccard2
        
        #SPHERICAL DISTANCE
        angle_jaccard3 <- spherical_jaccard(cell_coords, species_list, N, input$bin_min3, input$bin_max3, distances)
        angle_jaccard3[,1] <- apply(angle_jaccard3, 1, function(x) round(x[1], digits = 1))
        unique_differences <- unique(angle_jaccard3[,1])
        mean_jaccard3 <- matrix(0, nrow = 0, ncol = 2)
        for(i in unique_differences)
        {
            mean_jaccard3 <- rbind(mean_jaccard3, c(i, mean(angle_jaccard3[angle_jaccard3[,1] == i,2])))
        }
        return_list[[3]] <- mean_jaccard3
        return(return_list)
    })    
    
    output$plotTumor <- renderRglwidget({
        return_list <- get_tumor_data()
        cell_ids <- return_list[[1]]
        color_scheme <- return_list[[2]]
        
        min_x <- min(cell_ids[,1])
        max_x <- max(cell_ids[,1])
        min_y <- min(cell_ids[,2])
        max_y <- max(cell_ids[,2])
        min_z <- min(cell_ids[,3])
        max_z <- max(cell_ids[,3])
        
        rgl.open(useNULL = T)
        bg3d("white")
        plot3d(cell_ids[,1], cell_ids[,2], cell_ids[,3], 
                      col = color_scheme[cell_ids[,4] + 1], 
                      xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
                      zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = "x", ylab = "y", zlab = "z")
        rglwidget()
    })
    
    output$plotSlice <- renderPlot({
        df_slice <- get_cross_section()
        plot(df_slice[,1], df_slice[,2], main = "Cross section", xlab = NA, ylab = NA, pch = 16,
             col = color_scheme[df_slice[,3] + 1])
    })
    
    output$plotEuclidMutant <- renderPlot({
        mean_mutant <- get_mutant_distance()
        plot(mean_mutant[,1], mean_mutant[,2], main = "Average number of mutants by distance",
             xlab = "Euclidean distance", ylab = "Average number of mutants", col = "red", pch = 16)
    })
    
    output$plotJaccardDistance <- renderPlot({
        mean_jaccard <- get_jaccard_distance()
        plot(mean_jaccard[,1], mean_jaccard[,2], main = "Mean Jaccard similarity by distance",
             xlab = "Euclidean distance", ylab = "Jaccard similarity", col = "blue", pch = 16)
    })
    
    output$plotJaccardSpherical<- renderPlot({
        return_list <- get_jaccard_spherical()
        mean_jaccard <- return_list[[1]]
        plot(mean_jaccard[,1], mean_jaccard[,2], main = "Similarity by spherical distance",
             xlab = "Normalized great circle distance", ylab = "Jaccard similarity", col = "green", pch = 16,
             ylim = c(0, 1.05))
        
        mean_jaccard <- return_list[[2]]
        points(mean_jaccard[,1], mean_jaccard[,2], col = "blue", pch = 16)
        
        mean_jaccard <- return_list[[3]]
        points(mean_jaccard[,1], mean_jaccard[,2], col = "red", pch = 16)
    })
    
}

# Run the application 
shinyApp(ui = ui, server = server)
