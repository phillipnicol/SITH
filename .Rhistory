vals <- c(0:max(jaccard_mat[,1]))
mean_jaccard <- as.data.frame(sapply(vals, function(x) {
return(mean(jaccard_mat[jaccard_mat[,1] == x,2]))
}))
vals <- as.data.frame(vals)
out$jaccard <- cbind(vals, mean_jaccard)
colnames(out$jaccard) <- c("Distance", "Mean jaccard index")
if(make.plot) {make_plot(out, tumor)}
return(out)
}
make_plot <- function(out.spatial, tumor) {
par(mfrow=c(2,2))
plot(out.spatial$mean_mutant[,1], out.spatial$mean_mutant[,2], pch = 4, col = "blue", xlab = "Euclid. distance",
ylab = "Mean # of mutants per cell", main = "Mutations per cell")
plot(out.spatial$jaccard[,1], out.spatial$jaccard[,2], pch = 4, col = "red", main = "Jaccard index comparison",
xlab = "Euclid. distance between cells", ylab = "Jaccard index")
tumor$muts <- tumor$muts[order(tumor$muts$MAF, decreasing = T),]; tumor$muts <- tumor$muts[tumor$muts$MAF > 0.01,]
plot(1:length(tumor$muts$MAF), tumor$muts$MAF, pch = 16, col = "green", xlab = "k-th largest clone",
ylab = "Mutation allele frequency", main = "Clone sizes")
}
sp <- spatialDistribution(out)
spatialDistribution <- function(tumor, make.plot = TRUE) {
out <- list()
#First do mean number of mutants by distance
#round first to get integers
tumor$cell_ids$distances <- round(tumor$cell_ids$distance)
vals <- c(0:max(tumor$cell_ids$distance))
mean_mutant <- as.data.frame(sapply(vals, function(x) {
return(mean(tumor$cell_ids[tumor$cell_ids$distance == x,5]))
}))
vals <- as.data.frame(vals)
out$mean_mutant <- cbind(vals, mean_mutant)
colnames(out$mean_mutant) <- c("Distance", "Mean # mutations")
#Now do jaccard similarity
N <- 500
jaccard_mat <- matrix(0, nrow = N, ncol = 2)
for(i in 1:N) {
s <- sample(1:nrow(tumor$cell_ids), 2, replace = F)
dist <- (tumor$cell_ids$x[s[1]] - tumor$cell_ids$x[s[2]])^2 + (tumor$cell_ids$y[s[1]] - tumor$cell_ids$y[s[2]])^2
dist <- dist + (tumor$cell_ids$z[s[1]] - tumor$cell_ids$z[s[2]])^2
dist <- sqrt(dist)
allele1 <- tumor$cell_ids$allele[s[1]] + 1
allele2 <- tumor$cell_ids$allele[s[2]] + 1
row1 <- tumor$alleles[allele1,-ncol(tumor$alleles)]
row2 <- tumor$alleles[allele2,-ncol(tumor$alleles)]
v1 <- row1[row1 != -1]
v2 <- row2[row2 != -1]
jaccard_mat[i,1] <- round(dist)
jaccard_mat[i,2] <- length(intersect(v1, v2))/length(union(v1,v2))
}
vals <- c(0:max(jaccard_mat[,1]))
mean_jaccard <- as.data.frame(sapply(vals, function(x) {
return(mean(jaccard_mat[jaccard_mat[,1] == x,2]))
}))
vals <- as.data.frame(vals)
out$jaccard <- cbind(vals, mean_jaccard)
colnames(out$jaccard) <- c("Distance", "Mean jaccard index")
if(make.plot) {make_plot(out, tumor)}
return(out)
}
make_plot <- function(out.spatial, tumor) {
par(mfrow=c(2,2))
plot(out.spatial$mean_mutant[,1], out.spatial$mean_mutant[,2], pch = 4, col = "blue", xlab = "Euclid. distance",
ylab = "Mean # of mutants per cell", main = "Mutations per cell")
plot(out.spatial$jaccard[,1], out.spatial$jaccard[,2], pch = 4, col = "red", main = "Jaccard index comparison",
xlab = "Euclid. distance between cells", ylab = "Jaccard index")
tumor$muts <- tumor$muts[order(tumor$muts$MAF, decreasing = T),]; tumor$muts <- tumor$muts[tumor$muts$MAF > 0.01,]
plot(1:length(tumor$muts$MAF), tumor$muts$MAF, pch = 16, col = "green", xlab = "k-th largest clone",
ylab = "Mutation allele frequency", main = "Clone sizes")
}
sp <- spatialDistribution(out)
out$cell_ids
out$cell_ids[which(out$cell_ids$allele %in% out$drivers),]
driver_ids <- out$cell_ids[which(out$cell_ids$allele %in% out$drivers),]
nrow(driver_ids)
nrow(out$cell_ids)
out$drivers
spatialDistribution <- function(tumor, make.plot = TRUE) {
out <- list()
#First do mean number of mutants by distance
#round first to get integers
tumor$cell_ids$distances <- round(tumor$cell_ids$distance)
vals <- c(0:max(tumor$cell_ids$distance))
mean_mutant <- as.data.frame(sapply(vals, function(x) {
return(mean(tumor$cell_ids[tumor$cell_ids$distance == x,5]))
}))
vals <- as.data.frame(vals)
out$mean_mutant <- cbind(vals, mean_mutant)
colnames(out$mean_mutant) <- c("Distance", "Mean # mutations")
driver_ids <- tumor$cell_ids[which(tumor$cell_ids$allele %in% tumor$drivers),]
vals <- c(0:max(driver_ids$distance))
mean_driver <- as.data.frame(sapply(vals, function(x) {
return(mean(driver_ids[driver_ids$distance == x,5]))
}))
vals <- as.data.frame(vals)
out$mean_driver <- cbind(vals, mean_driver)
colnames(out$mean_driver) <- c("Distance", "Mean # drivers")
#Now do jaccard similarity
N <- 500
jaccard_mat <- matrix(0, nrow = N, ncol = 2)
for(i in 1:N) {
s <- sample(1:nrow(tumor$cell_ids), 2, replace = F)
dist <- (tumor$cell_ids$x[s[1]] - tumor$cell_ids$x[s[2]])^2 + (tumor$cell_ids$y[s[1]] - tumor$cell_ids$y[s[2]])^2
dist <- dist + (tumor$cell_ids$z[s[1]] - tumor$cell_ids$z[s[2]])^2
dist <- sqrt(dist)
allele1 <- tumor$cell_ids$allele[s[1]] + 1
allele2 <- tumor$cell_ids$allele[s[2]] + 1
row1 <- tumor$alleles[allele1,-ncol(tumor$alleles)]
row2 <- tumor$alleles[allele2,-ncol(tumor$alleles)]
v1 <- row1[row1 != -1]
v2 <- row2[row2 != -1]
jaccard_mat[i,1] <- round(dist)
jaccard_mat[i,2] <- length(intersect(v1, v2))/length(union(v1,v2))
}
vals <- c(0:max(jaccard_mat[,1]))
mean_jaccard <- as.data.frame(sapply(vals, function(x) {
return(mean(jaccard_mat[jaccard_mat[,1] == x,2]))
}))
vals <- as.data.frame(vals)
out$jaccard <- cbind(vals, mean_jaccard)
colnames(out$jaccard) <- c("Distance", "Mean jaccard index")
if(make.plot) {make_plot(out, tumor)}
return(out)
}
make_plot <- function(out.spatial, tumor) {
par(mfrow=c(2,2))
plot(out.spatial$mean_mutant[,1], out.spatial$mean_mutant[,2], pch = 4, col = "blue", xlab = "Euclid. distance",
ylab = "Mean # of mutants per cell", main = "Mutations per cell")
plot(out.spatial$jaccard[,1], out.spatial$jaccard[,2], pch = 4, col = "red", main = "Jaccard index comparison",
xlab = "Euclid. distance between cells", ylab = "Jaccard index")
tumor$muts <- tumor$muts[order(tumor$muts$MAF, decreasing = T),]; tumor$muts <- tumor$muts[tumor$muts$MAF > 0.01,]
plot(1:length(tumor$muts$MAF), tumor$muts$MAF, pch = 16, col = "green", xlab = "k-th largest clone",
ylab = "Mutation allele frequency", main = "Clone sizes")
}
sp <- spatialDistribution(out)
sp$mean_driver
out <- generateTumor(du = 0.03)
sp <- spatialDistribution(out)
sp$mean_driver
plot(sp$mean_driver[,1], sp$mean_driver[,2])
spatialDistribution <- function(tumor, make.plot = TRUE) {
out <- list()
#First do mean number of mutants by distance
#round first to get integers
tumor$cell_ids$distances <- round(tumor$cell_ids$distance)
vals <- c(0:max(tumor$cell_ids$distance))
mean_mutant <- as.data.frame(sapply(vals, function(x) {
return(mean(tumor$cell_ids[tumor$cell_ids$distance == x,5]))
}))
vals <- as.data.frame(vals)
out$mean_mutant <- cbind(vals, mean_mutant)
colnames(out$mean_mutant) <- c("Distance", "Mean # mutations")
driver_ids <- tumor$cell_ids[which(tumor$cell_ids$allele %in% tumor$drivers),]
vals <- c(0:max(driver_ids$distance))
mean_driver <- as.data.frame(sapply(vals, function(x) {
return(nrow(driver_ids[driver_ids$distance == x,])/nrow(tumor$cell_ids[tumor$cell_ids$distance == x,]) )
}))
vals <- as.data.frame(vals)
out$mean_driver <- cbind(vals, mean_driver)
colnames(out$mean_driver) <- c("Distance", "Mean # drivers")
#Now do jaccard similarity
N <- 500
jaccard_mat <- matrix(0, nrow = N, ncol = 2)
for(i in 1:N) {
s <- sample(1:nrow(tumor$cell_ids), 2, replace = F)
dist <- (tumor$cell_ids$x[s[1]] - tumor$cell_ids$x[s[2]])^2 + (tumor$cell_ids$y[s[1]] - tumor$cell_ids$y[s[2]])^2
dist <- dist + (tumor$cell_ids$z[s[1]] - tumor$cell_ids$z[s[2]])^2
dist <- sqrt(dist)
allele1 <- tumor$cell_ids$allele[s[1]] + 1
allele2 <- tumor$cell_ids$allele[s[2]] + 1
row1 <- tumor$alleles[allele1,-ncol(tumor$alleles)]
row2 <- tumor$alleles[allele2,-ncol(tumor$alleles)]
v1 <- row1[row1 != -1]
v2 <- row2[row2 != -1]
jaccard_mat[i,1] <- round(dist)
jaccard_mat[i,2] <- length(intersect(v1, v2))/length(union(v1,v2))
}
vals <- c(0:max(jaccard_mat[,1]))
mean_jaccard <- as.data.frame(sapply(vals, function(x) {
return(mean(jaccard_mat[jaccard_mat[,1] == x,2]))
}))
vals <- as.data.frame(vals)
out$jaccard <- cbind(vals, mean_jaccard)
colnames(out$jaccard) <- c("Distance", "Mean jaccard index")
if(make.plot) {make_plot(out, tumor)}
return(out)
}
make_plot <- function(out.spatial, tumor) {
par(mfrow=c(2,2))
plot(out.spatial$mean_mutant[,1], out.spatial$mean_mutant[,2], pch = 4, col = "blue", xlab = "Euclid. distance",
ylab = "Mean # of mutants per cell", main = "Mutations per cell")
plot(out.spatial$jaccard[,1], out.spatial$jaccard[,2], pch = 4, col = "red", main = "Jaccard index comparison",
xlab = "Euclid. distance between cells", ylab = "Jaccard index")
tumor$muts <- tumor$muts[order(tumor$muts$MAF, decreasing = T),]; tumor$muts <- tumor$muts[tumor$muts$MAF > 0.01,]
plot(1:length(tumor$muts$MAF), tumor$muts$MAF, pch = 16, col = "green", xlab = "k-th largest clone",
ylab = "Mutation allele frequency", main = "Clone sizes")
}
sp <- spatialDistribution(out)
plot(sp$mean_driver[,1], sp$mean_driver[,2])
spatialDistribution <- function(tumor, make.plot = TRUE) {
out <- list()
#First do mean number of mutants by distance
#round first to get integers
tumor$cell_ids$distances <- round(tumor$cell_ids$distance)
vals <- c(0:max(tumor$cell_ids$distance))
mean_mutant <- as.data.frame(sapply(vals, function(x) {
return(mean(tumor$cell_ids[tumor$cell_ids$distance == x,5]))
}))
vals <- as.data.frame(vals)
out$mean_mutant <- cbind(vals, mean_mutant)
colnames(out$mean_mutant) <- c("Distance", "Mean # mutations")
driver_ids <- tumor$cell_ids[which(tumor$cell_ids$allele %in% tumor$drivers),]
vals <- c(0:max(driver_ids$distance))
mean_driver <- as.data.frame(sapply(vals, function(x) {
return(nrow(driver_ids[driver_ids$distance == x,])/nrow(tumor$cell_ids[tumor$cell_ids$distance == x,]) )
}))
vals <- as.data.frame(vals)
out$mean_driver <- cbind(vals, mean_driver)
colnames(out$mean_driver) <- c("Distance", "Mean # drivers")
#Now do jaccard similarity
N <- 500
jaccard_mat <- matrix(0, nrow = N, ncol = 2)
for(i in 1:N) {
s <- sample(1:nrow(tumor$cell_ids), 2, replace = F)
dist <- (tumor$cell_ids$x[s[1]] - tumor$cell_ids$x[s[2]])^2 + (tumor$cell_ids$y[s[1]] - tumor$cell_ids$y[s[2]])^2
dist <- dist + (tumor$cell_ids$z[s[1]] - tumor$cell_ids$z[s[2]])^2
dist <- sqrt(dist)
allele1 <- tumor$cell_ids$allele[s[1]] + 1
allele2 <- tumor$cell_ids$allele[s[2]] + 1
row1 <- tumor$alleles[allele1,-ncol(tumor$alleles)]
row2 <- tumor$alleles[allele2,-ncol(tumor$alleles)]
v1 <- row1[row1 != -1]
v2 <- row2[row2 != -1]
jaccard_mat[i,1] <- round(dist)
jaccard_mat[i,2] <- length(intersect(v1, v2))/length(union(v1,v2))
}
vals <- c(0:max(jaccard_mat[,1]))
mean_jaccard <- as.data.frame(sapply(vals, function(x) {
return(mean(jaccard_mat[jaccard_mat[,1] == x,2]))
}))
vals <- as.data.frame(vals)
out$jaccard <- cbind(vals, mean_jaccard)
colnames(out$jaccard) <- c("Distance", "Mean jaccard index")
if(make.plot) {make_plot(out, tumor)}
return(out)
}
make_plot <- function(out.spatial, tumor) {
par(mfrow=c(2,2))
plot(out.spatial$mean_mutant[,1], out.spatial$mean_mutant[,2], pch = 4, col = "blue", xlab = "Euclid. distance",
ylab = "Mean # of mutants per cell", main = "Mutations per cell")
plot(out.spatial$mean_driver[,1], out.spatial$mean_driver[,2], pch = 4, col = "orange", xlab = "Euclid. distance",
ylab = "Mean # of drivers per cell", main = "Drivers per cell")
plot(out.spatial$jaccard[,1], out.spatial$jaccard[,2], pch = 16, col = "red", main = "Jaccard index comparison",
xlab = "Euclid. distance between cells", ylab = "Jaccard index")
tumor$muts <- tumor$muts[order(tumor$muts$MAF, decreasing = T),]; tumor$muts <- tumor$muts[tumor$muts$MAF > 0.01,]
plot(1:length(tumor$muts$MAF), tumor$muts$MAF, pch = 16, col = "green", xlab = "k-th largest clone",
ylab = "Mutation allele frequency", main = "Clone sizes")
}
sp <- spatialDistribution(out)
out <- generateTumor(N = 100000)
out <- generateTumor(N = 1000000)
sp <- spatialDistribution(out)
out <- generateTumor(N = 1000000, du = 0.003, s = 1.05)
sp <- spatialDistribution()
sp <- spatialDistribution(tumor = out)
out <- generateTumor(N = 1000000, du = 0.003, d = 0.2, s = 1.05)
sp <- spatialDistribution(out)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor()
sp <- spatialDistribution(out)
out <- generateTumor(N = 250000, d = 0.2, s = 1.05)
sp <- spatialDistribution(out)
visualizeTumor(out, plot.type = "heat")
visualizeTumor(out, plot.type = "normal")
bulks <- randomBulkSamples(out, nsamples = 10)
View(bulks)
randomSingleCells(out, ncells = 10)
scs <- randomSingleCells(out, ncells = 10)
head(scs)
View(scs)
out <- generateTumor(verbose = FALSE)
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.003, s = 1.1, cutoff = 0.01, verbose = TRUE) {
input <- list()
input$params <- c(N, b, d, u, du, s, verbose)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$alleles <- data.frame(tumor[[2]]); nc <- ncol(out$alleles)
df <-  as.data.frame(tumor[[3]])
#ix <- which(df[,1] > cutoff*N)
ix <- as.data.frame(0:(nrow(df)-1))
out$muts <- cbind(ix, df[,1], df[,1]/N)
#out$muts <- as.data.frame(cbind(ix - 1, df[ix,], df[ix,]/N))
#out$muts <- out$muts[order(-out$muts[,3]),]
colnames(out$muts) <- c("id", "count", "MAF")
out$phylo_tree <- as.data.frame(tumor[[4]])
colnames(out$phylo_tree) <- c("parent", "child")
color_scheme_mat <- tumor[[5]]
out$color_scheme <- apply(color_scheme_mat, 2, function(x) {
return(rgb(x[1],x[2],x[3],1))
})
out$drivers <- tumor[[7]]
out$params <- input$params
return(out)
}
out <- generateTumor(verbose = FALSE)
Rcpp::compileAttributes()
head(out)
names(out)
visualizeTumor <- function(tumor_instance, plot.type = "normal", background = "black") {
if(!requireNamespace("rgl", quietly = TRUE)) {
stop("rgl package required for interactive tumor visualization. Please install this package to use this feature.")
}
min_x <- min(tumor_instance$cell_ids[,1])
max_x <- max(tumor_instance$cell_ids[,1])
min_y <- min(tumor_instance$cell_ids[,2])
max_y <- max(tumor_instance$cell_ids[,2])
min_z <- min(tumor_instance$cell_ids[,3])
max_z <- max(tumor_instance$cell_ids[,3])
if(plot.type == "heat") {
col.pal <- colorRampPalette(c("blue", "red"))
hotcold <- col.pal(max(tumor_instance$cell_ids$nmuts) + 1)
rgl::open3d()
rgl::bg3d(background)
rgl::plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = hotcold[tumor_instance$cell_ids$nmuts+1], box = F, axes = F,
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = NA, ylab = NA, zlab = NA)
}
else if(plot.type == "normal") {
rgl::open3d()
rgl::bg3d(background)
rgl::plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = tumor_instance$color_scheme[tumor_instance$cell_ids[,4]+1], box = F, axes = F,
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = NA, ylab = NA, zlab = NA)
}
}
visualizeTumor(out, background= "white")
visualizeTumor <- function(tumor_instance, plot.type = "normal", background = "black") {
if(!requireNamespace("rgl", quietly = TRUE)) {
stop("rgl package required for interactive tumor visualization. Please install this package to use this feature.")
}
min_x <- min(tumor_instance$cell_ids[,1])
max_x <- max(tumor_instance$cell_ids[,1])
min_y <- min(tumor_instance$cell_ids[,2])
max_y <- max(tumor_instance$cell_ids[,2])
min_z <- min(tumor_instance$cell_ids[,3])
max_z <- max(tumor_instance$cell_ids[,3])
if(plot.type == "heat") {
col.pal <- colorRampPalette(c("blue", "red"))
hotcold <- col.pal(max(tumor_instance$cell_ids$nmuts) + 1)
rgl::open3d()
rgl::bg3d(background)
rgl::plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = hotcold[tumor_instance$cell_ids$nmuts+1], box = F, axes = F,
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = FALSE, ylab = FALSE, zlab = FALSE)
}
else if(plot.type == "normal") {
rgl::open3d()
rgl::bg3d(background)
rgl::plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = tumor_instance$color_scheme[tumor_instance$cell_ids[,4]+1], box = F, axes = F,
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = NA, ylab = NA, zlab = NA)
}
}
visualizeTumor(out, background= "white")
visualizeTumor <- function(tumor_instance, plot.type = "normal", background = "black") {
if(!requireNamespace("rgl", quietly = TRUE)) {
stop("rgl package required for interactive tumor visualization. Please install this package to use this feature.")
}
min_x <- min(tumor_instance$cell_ids[,1])
max_x <- max(tumor_instance$cell_ids[,1])
min_y <- min(tumor_instance$cell_ids[,2])
max_y <- max(tumor_instance$cell_ids[,2])
min_z <- min(tumor_instance$cell_ids[,3])
max_z <- max(tumor_instance$cell_ids[,3])
if(plot.type == "heat") {
col.pal <- colorRampPalette(c("blue", "red"))
hotcold <- col.pal(max(tumor_instance$cell_ids$nmuts) + 1)
rgl::open3d()
rgl::bg3d(background)
rgl::plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = hotcold[tumor_instance$cell_ids$nmuts+1], box = F, axes = F,
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = FALSE, ylab = FALSE, zlab = FALSE)
}
else if(plot.type == "normal") {
rgl::open3d()
rgl::bg3d(background)
rgl::plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = tumor_instance$color_scheme[tumor_instance$cell_ids[,4]+1], box = F, axes = F,
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = FALSE, ylab = FALSE, zlab = FALSE)
}
}
visualizeTumor(out, background= "white")
visualizeTumor <- function(tumor_instance, plot.type = "normal", background = "black") {
if(!requireNamespace("rgl", quietly = TRUE)) {
stop("rgl package required for interactive tumor visualization. Please install this package to use this feature.")
}
min_x <- min(tumor_instance$cell_ids[,1])
max_x <- max(tumor_instance$cell_ids[,1])
min_y <- min(tumor_instance$cell_ids[,2])
max_y <- max(tumor_instance$cell_ids[,2])
min_z <- min(tumor_instance$cell_ids[,3])
max_z <- max(tumor_instance$cell_ids[,3])
if(plot.type == "heat") {
col.pal <- colorRampPalette(c("blue", "red"))
hotcold <- col.pal(max(tumor_instance$cell_ids$nmuts) + 1)
rgl::open3d()
rgl::bg3d(background)
rgl::plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = hotcold[tumor_instance$cell_ids$nmuts+1], box = F, axes = F,
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = FALSE, ylab = FALSE, zlab = FALSE)
}
else if(plot.type == "normal") {
rgl::open3d()
rgl::bg3d(background)
rgl::plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = tumor_instance$color_scheme[tumor_instance$cell_ids[,4]+1], box = F, axes = F,
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = "", ylab = "", zlab = "")
}
}
visualizeTumor(out, background= "white")
visualizeTumor <- function(tumor_instance, plot.type = "normal", background = "black") {
if(!requireNamespace("rgl", quietly = TRUE)) {
stop("rgl package required for interactive tumor visualization. Please install this package to use this feature.")
}
min_x <- min(tumor_instance$cell_ids[,1])
max_x <- max(tumor_instance$cell_ids[,1])
min_y <- min(tumor_instance$cell_ids[,2])
max_y <- max(tumor_instance$cell_ids[,2])
min_z <- min(tumor_instance$cell_ids[,3])
max_z <- max(tumor_instance$cell_ids[,3])
if(plot.type == "heat") {
col.pal <- colorRampPalette(c("blue", "red"))
hotcold <- col.pal(max(tumor_instance$cell_ids$nmuts) + 1)
rgl::open3d()
rgl::bg3d(background)
rgl::plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = hotcold[tumor_instance$cell_ids$nmuts+1], box = F, axes = F,
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = "", ylab = "", zlab = "")
}
else if(plot.type == "normal") {
rgl::open3d()
rgl::bg3d(background)
rgl::plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = tumor_instance$color_scheme[tumor_instance$cell_ids[,4]+1], box = F, axes = F,
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = "", ylab = "", zlab = "")
}
}
visualizeTumor(out, background= "white")
visualizeTumor(out, background= "black")
visualizeTumor(out, background= "black", plot.type = "heat")
Rcpp::compileAttributes()
Rcpp::compileAttributes()
getwd()
devtools::check()
library(devtools)
install.packages("devtools")
devtools::check()
library(devtools)
library(roxygen2)
roxygen2::roxygenise()
?generateTumor
roxygen2::roxygenise()
Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor()
visualizeTumor(out)
visualizeTumor(out, plot.type = "heat")
dim(out$phylo_tree)
roxygen2::roxygenise()
library(TumorGenerator)
?generateTumor
Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor()
out$phylo_tree
summary(out$phylo_tree)
dim(out$phylo_tree)
head(out$phylo_tree)
dim(out$phylo_tree)
dim(out$muts)
out$alleles
out$phylo_tree[70,]
library(igraph)
g <- graph.tree(out$phylo_tree, mode = "out")
df <- as_data_frame(out$phylo_tree, what = "edges")
graph_from_data_frame(out$phylo_tree, directed = T)
g <- graph_from_data_frame(out$phylo_tree)
g <- graph_from_data_frame(out$phylo_tree, directed = T)
summary(g)
plot(g)
all_simple_paths(g, from = 0, to = 70)
g
g[1]
all_simple_paths(g, from = 0, to = 70)
V(g)
all_simple_paths(g, from = 0, to = 1)
all_simple_paths(g, from = "0", to = "1")
all_simple_paths(g, from = "0", to = "70")
