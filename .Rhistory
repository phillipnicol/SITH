Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor()
out
Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor()
out
library(rgl)
library(RGL)
rgl
?rgl
library(rgl)
library(rgl)
require(rgl)
install.packages("rgl")
library(TumorGenerator)
out <- generateTumor()
out$cell_ids
out$color_scheme <- "red"
library(TumorGenerator)
out <- generateTumor()
out$color_scheme <- "red"
visualizeTumor(out)
visualizeTumor <- function(tumor_instance) {
min_x <- min(tumor_instance$cell_ids[,1])
max_x <- max(tumor_instance$cell_ids[,1])
min_y <- min(tumor_instance$cell_ids[,2])
max_y <- max(tumor_instance$cell_ids[,2])
min_z <- min(tumor_instance$cell_ids[,3])
max_z <- max(tumor_instance$cell_ids[,3])
plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = tumor_instance$color_scheme[tumor_instance$cell_ids[,4] + 1],
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = "x", ylab = "y", zlab = "z")
}
visualizeTumor(out)
library(rgl())
library(rgl)
visualizeTumor <- function(tumor_instance) {
min_x <- min(tumor_instance$cell_ids[,1])
max_x <- max(tumor_instance$cell_ids[,1])
min_y <- min(tumor_instance$cell_ids[,2])
max_y <- max(tumor_instance$cell_ids[,2])
min_z <- min(tumor_instance$cell_ids[,3])
max_z <- max(tumor_instance$cell_ids[,3])
plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = tumor_instance$color_scheme[tumor_instance$cell_ids[,4] + 1],
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = "x", ylab = "y", zlab = "z")
}
visualizeTumor(out)
visualizeTumor <- function(tumor_instance) {
if(!requireNamespace("rgl", quietly = TRUE)) {
stop("rgl package required for interactive tumor visualization. Please install this package to use this feature.")
}
min_x <- min(tumor_instance$cell_ids[,1])
max_x <- max(tumor_instance$cell_ids[,1])
min_y <- min(tumor_instance$cell_ids[,2])
max_y <- max(tumor_instance$cell_ids[,2])
min_z <- min(tumor_instance$cell_ids[,3])
max_z <- max(tumor_instance$cell_ids[,3])
plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = tumor_instance$color_scheme[tumor_instance$cell_ids[,4] + 1],
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = "x", ylab = "y", zlab = "z")
}
visualizeTumor(out)
Rcpp::compileAttributes()
library(TumorGenerator)
generateTumor()
out <- generateTumor()
out <- generateTumor()
dim(out$cell_ids)
out <- generateTumor(200000)
out <- generateTumor()
View(out)
out$cell_ids
View(out)
View(out)
View(out)
View(out$cell_ids)
out$color_scheme <- "red"
visualizeTumor(out)
visualizeTumor <- function(tumor_instance) {
if(!requireNamespace("rgl", quietly = TRUE)) {
stop("rgl package required for interactive tumor visualization. Please install this package to use this feature.")
}
min_x <- min(tumor_instance$cell_ids[,1])
max_x <- max(tumor_instance$cell_ids[,1])
min_y <- min(tumor_instance$cell_ids[,2])
max_y <- max(tumor_instance$cell_ids[,2])
min_z <- min(tumor_instance$cell_ids[,3])
max_z <- max(tumor_instance$cell_ids[,3])
plot3d(tumor_instance$cell_ids[,1], tumor_instance$cell_ids[,2], tumor_instance$cell_ids[,3],
col = "red",
xlim = c(min_x - 10, max_x + 10), ylim = c(min_y - 10, max_y + 10), size = 5,
zlim = c(min_z - 10, max_z + 10), pch = 16, xlab = "x", ylab = "y", zlab = "z")
}
visualizeTumor(out)
Rcpp::compileAttributes()
out <- generateTumor()
out <- generateTumor()
Rcpp::compileAttributes()
library(TumorGenerator)
Rcpp::compileAttributes()
out <- generateTumor(1000000)
out <- generateTumor(1000000, s = 1.005)
out <- generateTumor(1000000, u = 0.00003, du = 0.00003)
out <- generateTumor(100000, b = 0.25, d = 0.23, u = 0.00003, du = 0.00003)
out <- generateTumor(2000000, s = 1.005)
out$color_scheme <- "red"
visualizeTumor(out)
max(out$cell_ids[,5])
max(out$cell_ids$nmuts)
max(out$cell_ids$distance)
Rcpp:compileAttributes()
Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor(2000000, s = 1.005)
Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor(2000000, s = 1.005)
Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor(2000000, s = 1.005)
out <- generateTumor(2000000, s = 1.1)
Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor(2000000, s = 1.005)
Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor(2000000, s = 1.005)
Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor(2000000, s = 1.005)
Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor(2000000, s = 1.005)
View(out)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library(TumorGenerator)
out <- generateTumor()
View(out)
out$species_dict
out <- generateTumor()
out <- generateTumor(N = 250000)
View(out)
out <- generateTumor(N = 250000)
View(out)
out$species_dict
out <- generateTumpr
out <- generateTumor
out <- generateTumor()
out <- generateTumor()
out <- generateTumor()
out <- generateTumor()
out <- generateTumor()
out <- generateTumor()
out <- generateTumor()
out <- generateTumor()
out <- generateTumor()
out <- generateTumor()
out <- generateTumor()
View(out)
species_dict
out$species_dict
out$species_dict[1000:1200,]
length(which(out$species_dict[,1] == 1))
length(which(out$species_dict[,2] == 1))
library(TumorGenerator)
out <- generateTumor()
View(out)
out$species_dict
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.00003, s = 1.1) {
input <- list()
input$params <- c(N, b, d, u, du, s)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$species_dict <- data.frame(tumor[[2]]); nc <- ncol(out$species_dict)
out$species_dict <- out$species_dict[out$species_dict[,nc] > 0,]
return(out)
}
out$species_dict
out <- generateTumor()
out$species_dict
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.00003, s = 1.1) {
input <- list()
input$params <- c(N, b, d, u, du, s)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$species_dict <- data.frame(tumor[[2]]); nc <- ncol(out$species_dict)
out$species_dict <- out$species_dict[out$species_dict[,nc] > 0,]
out$species_dict <- out$species_dict[order(out$species_dict[,nc]),]
return(out)
}
out <- generateTumor()
View(out)
out$species_dict
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.00003, s = 1.1) {
input <- list()
input$params <- c(N, b, d, u, du, s)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$species_dict <- data.frame(tumor[[2]]); nc <- ncol(out$species_dict)
out$species_dict <- out$species_dict[out$species_dict[,nc] > 0,]
out$species_dict <- out$species_dict[order(-out$species[,nc]),]
return(out)
}
out$species_dict
out <- generateTumor()
out$species_dict
out <- generateTumor(1000000)
out$species_dict
lenght(which(out$species_dict[,ncol(out$species_dict)] == 1))
length(which(out$species_dict[,ncol(out$species_dict)] == 1))
ncol(out$species_dict)
nrow(out$species_dict)
max(species_dict)
max(out$species_dict)
out$species_dict[25000:25200, ]
which(out$species_dict == max(out$species_dict), arr.ind = T)
which(out$species_dict == max(out$species_dict), arr.ind = T)[2]
which(out$species_dict == max(out$species_dict[1,-ncol(out$species_dict)]), arr.ind = T)[2]
which(out$species_dict == max(out$species_dict[1,-ncol(out$species_dict)])==2, arr.ind = T)[2]
which(out$species_dict[,-ncol(out$species_dict)] == 2, arr.ind = T)[2]
which(out$species_dict[,-ncol(out$species_dict)] == 79, arr.ind = T)[2]
out$species_dict
which(out$species_dict[,-ncol(out$species_dict)] == 79, arr.ind = T)
which(out$species_dict[,-ncol(out$species_dict)] == 79, arr.ind = T)[,1]
out$species_dict[180,]
which(out$species_dict[,-ncol(out$species_dict)] == 79, arr.ind = T)[,1][1]
getFrequentMuts <- function(species_dict, cutoff = 0.01) {
max_mut <- max(species_dict[,-ncol(species_dict)])
muts <- matrix(1:max_mut, nrow = max_mut, ncol = 2)
for(i in 1:muts) {
ix <- which(out$species_dict[,-ncol(out$species_dict)] == i, arr.ind = T)[,1]
if(is.na(ix)) {muts[i,2] = -1; next}
muts[i,2] <- sum(species_dict[ix,ncol(species_dict)])
}
return(muts)
}
out.muts <- getFrequentMuts(out$species_dict)
getFrequentMuts <- function(species_dict, cutoff = 0.01) {
max_mut <- max(species_dict[,-ncol(species_dict)])
muts <- matrix(1:max_mut, nrow = max_mut, ncol = 2)
for(i in 1:muts) {
ix <- which(out$species_dict[,-ncol(out$species_dict)] == i, arr.ind = T)[,1]
if(length(ix) == 0) {muts[i,2] = -1; next}
muts[i,2] <- sum(species_dict[ix,ncol(species_dict)])
}
return(muts)
}
out.muts <- getFrequentMuts(out$species_dict)
View(out.muts)
getFrequentMuts <- function(species_dict, cutoff = 0.01) {
max_mut <- max(species_dict[,-ncol(species_dict)])
muts <- matrix(1:max_mut, nrow = max_mut, ncol = 2)
for(i in 1:max_mut) {
ix <- which(out$species_dict[,-ncol(out$species_dict)] == i, arr.ind = T)[,1]
if(length(ix) == 0) {muts[i,2] = -1; next}
muts[i,2] <- sum(species_dict[ix,ncol(species_dict)])
}
return(muts)
}
out.muts <- getFrequentMuts(out$species_dict)
getFrequentMuts <- function(species_dict, cutoff = 0.01) {
max_mut <- max(species_dict[,-ncol(species_dict)])
muts <- matrix(1:max_mut, nrow = max_mut, ncol = 2)
for(i in 1:max_mut) {
print(i)
ix <- which(out$species_dict[,-ncol(out$species_dict)] == i, arr.ind = T)[,1]
if(length(ix) == 0) {muts[i,2] = -1; next}
muts[i,2] <- sum(species_dict[ix,ncol(species_dict)])
}
return(muts)
}
out.muts <- getFrequentMuts(out$species_dict)
out$species_dict
out$species_dict[out$species_dict[,ncol(out$species_dict)] > 100,]
0.01*0.01
1000000*0.01*0.01
ix <- which(out$species_dict[,-ncol(out$species_dict)] == 79, arr.ind = T)[,1]
sum(species_dict[ix,ncol(out$species_dict)])
sum(out$species_dict[ix,ncol(out$species_dict)])
library(TumorGenerator)
out <- generateTumor()
View(out)
out$muts
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.00003, s = 1.1) {
input <- list()
input$params <- c(N, b, d, u, du, s)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$species_dict <- data.frame(tumor[[2]]); nc <- ncol(out$species_dict)
out$species_dict <- out$species_dict[out$species_dict[,nc] > 0,]
out$species_dict <- out$species_dict[order(-out$species[,nc]),]
length(tumor[[3]])
out$muts = as.data.frame(tumor[[3]])
return(out)
}
out <- generateTumor()
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.00003, s = 1.1) {
input <- list()
input$params <- c(N, b, d, u, du, s)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$species_dict <- data.frame(tumor[[2]]); nc <- ncol(out$species_dict)
out$species_dict <- out$species_dict[out$species_dict[,nc] > 0,]
out$species_dict <- out$species_dict[order(-out$species[,nc]),]
print(length(tumor[[3]]))
out$muts = as.data.frame(tumor[[3]])
return(out)
}
out <- generateTumor()
View(out)
out$muts
dim(out$muts)
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.00003, s = 1.1, cutoff = 0.01) {
input <- list()
input$params <- c(N, b, d, u, du, s)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$species_dict <- data.frame(tumor[[2]]); nc <- ncol(out$species_dict)
out$species_dict <- out$species_dict[out$species_dict[,nc] > 0,]
out$species_dict <- out$species_dict[order(-out$species[,nc]),]
print(length(tumor[[3]]))
out$muts = as.data.frame(tumor[[3]])
out$muts = out$muts[out$muts > cutoff*N,]
return(out)
}
out <- generateTumor()
out$muts
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.00003, s = 1.1, cutoff = 0.01) {
input <- list()
input$params <- c(N, b, d, u, du, s)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$species_dict <- data.frame(tumor[[2]]); nc <- ncol(out$species_dict)
out$species_dict <- out$species_dict[out$species_dict[,nc] > 0,]
out$species_dict <- out$species_dict[order(-out$species[,nc]),]
df <-  as.data.frame(tumor[[3]])
ix <- which(df > cutoff*N)
out$muts <- cbind(ix, df[ix])
return(out)
}
out <- generateTumor()
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.00003, s = 1.1, cutoff = 0.01) {
input <- list()
input$params <- c(N, b, d, u, du, s)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$species_dict <- data.frame(tumor[[2]]); nc <- ncol(out$species_dict)
out$species_dict <- out$species_dict[out$species_dict[,nc] > 0,]
out$species_dict <- out$species_dict[order(-out$species[,nc]),]
df <-  as.data.frame(tumor[[3]])
ix <- which(df[,1] > cutoff*N)
out$muts <- cbind(ix, df[ix,])
return(out)
}
out <- generateTumor()
View(out)
out$muts
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.00003, s = 1.1, cutoff = 0.01) {
input <- list()
input$params <- c(N, b, d, u, du, s)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$species_dict <- data.frame(tumor[[2]]); nc <- ncol(out$species_dict)
out$species_dict <- out$species_dict[out$species_dict[,nc] > 0,]
out$species_dict <- out$species_dict[order(-out$species[,nc]),]
df <-  as.data.frame(tumor[[3]])
ix <- which(df[,1] > cutoff*N)
out$muts <- cbind(ix, df[ix,], df[ix,]/N)
colnames(out$muts) <- c("id", "count", "MAF")
return(out)
}
out <- generateTumor()
View(out)
out$muts
out <- generateTumor(1000000)
out$muts
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.00003, s = 1.1, cutoff = 0.01) {
input <- list()
input$params <- c(N, b, d, u, du, s)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$species_dict <- data.frame(tumor[[2]]); nc <- ncol(out$species_dict)
out$species_dict <- out$species_dict[out$species_dict[,nc] > 0,]
out$species_dict <- out$species_dict[order(-out$species[,nc]),]
df <-  as.data.frame(tumor[[3]])
ix <- order(which(df[,1] > cutoff*N), decreasing = T)
out$muts <- cbind(ix, df[ix,], df[ix,]/N)
colnames(out$muts) <- c("id", "count", "MAF")
return(out)
}
out <- generateTumor()
out$muts
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.00003, s = 1.1, cutoff = 0.01) {
input <- list()
input$params <- c(N, b, d, u, du, s)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$species_dict <- data.frame(tumor[[2]]); nc <- ncol(out$species_dict)
out$species_dict <- out$species_dict[out$species_dict[,nc] > 0,]
out$species_dict <- out$species_dict[order(-out$species[,nc]),]
df <-  as.data.frame(tumor[[3]])
ix <- which(df[,1] > cutoff*N)
out$muts <- cbind(ix, df[ix,], df[ix,]/N)
out$muts <- out$muts[order(-out$muts[,3]),]
colnames(out$muts) <- c("id", "count", "MAF")
return(out)
}
out <- generateTumor()
out$muts
out <- generateTumor(1000000)
out$muts
plot(out$muts[,3])
out$species_dict
out$muts
generateTumor <- function(N = 100000, b = 0.25, d = 0.13, u = 0.01, du = 0.00003, s = 1.1, cutoff = 0.01) {
input <- list()
input$params <- c(N, b, d, u, du, s)
tumor <- simulate_tumor(input)
out <- list()
out$cell_ids <- data.frame(tumor[[1]])
colnames(out$cell_ids) <- c("x", "y", "z", "allele", "nmuts", "distance")
out$species_dict <- data.frame(tumor[[2]]); nc <- ncol(out$species_dict)
out$species_dict <- out$species_dict[out$species_dict[,nc] > 0,]
out$species_dict <- out$species_dict[order(-out$species[,nc]),]
df <-  as.data.frame(tumor[[3]])
ix <- which(df[,1] > cutoff*N)
out$muts <- cbind(ix - 1, df[ix,], df[ix,]/N)
out$muts <- out$muts[order(-out$muts[,3]),]
colnames(out$muts) <- c("id", "count", "MAF")
return(out)
}
out <- generateTumor(250000)
out$muts
out <- generateTumor(250000)
out$muts
out <- generateTumor(1000000, s = 1.005)
out$muts
out$species_dict
points(out$muts[,3])
plot(out$muts[,3], ylim = c(0,0.3))
out <- generateTumor(1000000, s = 1.005, cutoff = 0.0001)
out$muts
plot(out$muts[,3], ylim = c(0,0.3))
